1. (Doctor Details)
import java.util.*;
public class Doctor {
private String id; 
private String name;
private String specialty;
public Doctor(String id, String name, String specialty)
{ this.id = id;
this.name = name;

 
this.specialty = specialty;
}
public String getId() { return id;
}
public String getName() 
{ return name;
}
 
public String getSpecialty()
{ return specialty;
}
@Override
public String toString() {
return "Dr. " + name + " (" + specialty + ")";
}
}
 
 
 
 
2. (Patient Details)
import java.util.*;
public class Patient {
private String id;
private String name;
private int age; 
private String contact;
 
public Patient(String id, String name, int age, String contact) 
{ this.id = id;
this.name = name;
this.age = age;
this.contact = contact;
}
public String getId() {

return id;
}
public String getName() 
{ return name;
}
public int getAge()
{ return age;
}
 
public String getContact()
{ return contact;
}
@Override
public String toString() {
return name + " (Age: " + age + ", Contact: " + contact + ")";
}
}
 
 
 
 
3. (Appointment Details)
import java.time.LocalDateTime; 
public class Appointment {
private Doctor doctor;
private Patient patient;
private LocalDateTime dateTime;

public Appointment(Doctor doctor, Patient patient, LocalDateTime dateTime) {

this.doctor = doctor; this.patient = patient; this.dateTime = dateTime;
}
public Doctor getDoctor() { return doctor;
}

 
 
public Patient getPatient() { return patient;
}
 
public LocalDateTime getDateTime() { return dateTime;
}
@Override
public String toString() {
return "Appointment with " + doctor + " for " + patient + " on " + dateTime;
}
}
 
 
 
 
4. AppointmentSystem (Core Logic)

import java.time.LocalDateTime; 
import java.util.*;
public class AppointmentSystem {
private List<Doctor> doctors = new ArrayList<>(); private List<Patient> patients = new ArrayList<>();
private List<Appointment> appointments = new ArrayList<>();
 
public void addDoctor(String id, String name, String specialty) { doctors.add(new Doctor(id, name, specialty));
}
public void registerPatient(String id, String name, int age, String contact) {
patients.add(new Patient(id, name, age, contact));
}
public void bookAppointment(String doctorId, String patientId, LocalDateTime dateTime) {
Doctor doctor = findDoctorById(doctorId); Patient patient = findPatientById(patientId);


 if (doctor == null || patient == null) { System.out.println("Doctor or patient not found!"); return;
}
 
appointments.add(new Appointment(doctor, patient, dateTime)); System.out.println("Appointment booked successfully!");
}
private Doctor findDoctorById(String id) { for (Doctor doctor : doctors) {
if (doctor.getId().equals(id)) return doctor;
}
return null;
}
 
private Patient findPatientById(String id) { for (Patient patient : patients) {
if (patient.getId().equals(id)) return patient;
}
return null;
}
 
public void listAppointments() { if (appointments.isEmpty()) {
System.out.println("No appointments scheduled.");
} else {
for (Appointment appointment : appointments) { System.out.println(appointment);
}
}
}
}
 
 
 
â€”
 
5. Main.java (Driver Program)
 
import java.time.LocalDateTime; 
import java.util.Scanner;


 public class Main {
public static void main(String[] args) {
AppointmentSystem system = new AppointmentSystem(); Scanner scanner = new Scanner(System.in);
 
system.addDoctor("D1", "Karim chowdhury", "Cardiology");
system.addDoctor("D2", "Md.Jashim Uddin", "Neurology");
system.registerPatient("P1", "Labiba ", 30, "123-456-7890");
system.registerPatient("P2", "Jannatul ferdous", 40, "987-654-
3210");
 
while (true) {
System.out.println("\nMedical Appointment System"); System.out.println("1. Book Appointment"); System.out.println("2. View Appointments"); System.out.println("3. Exit"); System.out.print("Choose an option: ");
int choice = scanner.nextInt();
 
switch (choice) { case 1:
System.out.print("Enter Doctor ID: "); 
String doctorId = scanner.next();
System.out.print("Enter Patient ID: "); 
String patientId = scanner.next();
System.out.print("Enter Appointment Year: ");
int year = scanner.nextInt();
System.out.print("Enter Month: ");
int month = scanner.nextInt(); 
System.out.print("Enter Day: ");
int day = scanner.nextInt();
System.out.print("Enter Hour (24-hour format): "); 
int hour = scanner.nextInt(); 
System.out.print("Enter Minutes: ");
int minutes = scanner.nextInt();

LocalDateTime dateTime = LocalDateTime.of(year, month, day, hour, minutes);
system.bookAppointment(doctorId, patientId, dateTime); return;

 
 
default:
System.out.println("Invalid choice. Please try again.");
}
}
}
}
